{"data":{"edges":[],"nodes":[{"data":{"node":{"template":{"_type":"Component","file_path":{"trace_as_metadata":true,"list":true,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"file_path","value":"","display_name":"Server File Path","advanced":true,"input_types":["Data","Message"],"dynamic":false,"info":"Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.","title_case":false,"type":"other","_input_type":"HandleInput"},"path":{"trace_as_metadata":true,"file_path":["e74c7fe3-681d-45c2-ab00-e44eae45e79a/f497fe47-d4d4-4cf9-92ef-64c912c40ab4.csv"],"fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","zip","tar","tgz","bz2","gz"],"temp_file":false,"list":true,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"path","value":["customersupportticketspreenchido"],"display_name":"Files","advanced":false,"dynamic":false,"info":"Supported file extensions: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx; optionally bundled in file extensions: zip, tar, tgz, bz2, gz","title_case":false,"type":"file","_input_type":"FileInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data import BaseFileComponent\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parallel_load_data, parse_text_file_to_data\nfrom langflow.io import BoolInput, IntInput\nfrom langflow.schema import Data\n\n\nclass FileComponent(BaseFileComponent):\n    \"\"\"Handles loading and processing of individual or zipped text files.\n\n    This component supports processing multiple valid files within a zip archive,\n    resolving paths, validating file types, and optionally using multithreading for processing.\n    \"\"\"\n\n    display_name = \"File\"\n    description = \"Load a file to be used in your project.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    VALID_EXTENSIONS = TEXT_FILE_TYPES\n\n    inputs = [\n        *BaseFileComponent._base_inputs,\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"[Deprecated] Use Multithreading\",\n            advanced=True,\n            value=True,\n            info=\"Set 'Processing Concurrency' greater than 1 to enable multithreading.\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"When multiple files are being processed, the number of files to process concurrently.\",\n            value=1,\n        ),\n    ]\n\n    outputs = [\n        *BaseFileComponent._base_outputs,\n    ]\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Processes files either sequentially or in parallel, depending on concurrency settings.\n\n        Args:\n            file_list (list[BaseFileComponent.BaseFile]): List of files to process.\n\n        Returns:\n            list[BaseFileComponent.BaseFile]: Updated list of files with merged data.\n        \"\"\"\n\n        def process_file(file_path: str, *, silent_errors: bool = False) -> Data | None:\n            \"\"\"Processes a single file and returns its Data object.\"\"\"\n            try:\n                return parse_text_file_to_data(file_path, silent_errors=silent_errors)\n            except FileNotFoundError as e:\n                msg = f\"File not found: {file_path}. Error: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n            except Exception as e:\n                msg = f\"Unexpected error processing {file_path}: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n\n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        concurrency = 1 if not self.use_multithreading else max(1, self.concurrency_multithreading)\n        file_count = len(file_list)\n\n        parallel_processing_threshold = 2\n        if concurrency < parallel_processing_threshold or file_count < parallel_processing_threshold:\n            if file_count > 1:\n                self.log(f\"Processing {file_count} files sequentially.\")\n            processed_data = [process_file(str(file.path), silent_errors=self.silent_errors) for file in file_list]\n        else:\n            self.log(f\"Starting parallel processing of {file_count} files with concurrency: {concurrency}.\")\n            file_paths = [str(file.path) for file in file_list]\n            processed_data = parallel_load_data(\n                file_paths,\n                silent_errors=self.silent_errors,\n                load_function=process_file,\n                max_concurrency=concurrency,\n            )\n\n        # Use rollup_basefile_data to merge processed data with BaseFile objects\n        return self.rollup_data(file_list, processed_data)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"concurrency_multithreading":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"concurrency_multithreading","value":1,"display_name":"Processing Concurrency","advanced":true,"dynamic":false,"info":"When multiple files are being processed, the number of files to process concurrently.","title_case":false,"type":"int","_input_type":"IntInput"},"delete_server_file_after_processing":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"delete_server_file_after_processing","value":true,"display_name":"Delete Server File After Processing","advanced":true,"dynamic":false,"info":"If true, the Server File Path will be deleted after processing.","title_case":false,"type":"bool","_input_type":"BoolInput"},"ignore_unspecified_files":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"ignore_unspecified_files","value":false,"display_name":"Ignore Unspecified Files","advanced":true,"dynamic":false,"info":"If true, Data with no 'file_path' property will be ignored.","title_case":false,"type":"bool","_input_type":"BoolInput"},"ignore_unsupported_extensions":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"ignore_unsupported_extensions","value":true,"display_name":"Ignore Unsupported Extensions","advanced":true,"dynamic":false,"info":"If true, files with unsupported extensions will not be processed.","title_case":false,"type":"bool","_input_type":"BoolInput"},"separator":{"tool_mode":false,"trace_as_metadata":true,"load_from_db":false,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"separator","value":"\n\n","display_name":"Separator","advanced":true,"dynamic":false,"info":"Specify the separator to use between multiple outputs in Message format.","title_case":false,"type":"str","_input_type":"StrInput"},"silent_errors":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"silent_errors","value":false,"display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","title_case":false,"type":"bool","_input_type":"BoolInput"},"use_multithreading":{"tool_mode":false,"trace_as_metadata":true,"list":false,"list_add_label":"Add More","required":false,"placeholder":"","show":true,"name":"use_multithreading","value":true,"display_name":"[Deprecated] Use Multithreading","advanced":true,"dynamic":false,"info":"Set 'Processing Concurrency' greater than 1 to enable multithreading.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Load a file to be used in your project.","icon":"file-text","base_classes":["Data","DataFrame","Message"],"display_name":"File","documentation":"","minimized":false,"custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"load_files","value":"__UNDEFINED__","cache":true,"required_inputs":[],"allows_loop":false,"tool_mode":true,"hidden":false},{"types":["DataFrame"],"selected":"DataFrame","name":"dataframe","display_name":"DataFrame","method":"load_dataframe","value":"__UNDEFINED__","cache":true,"required_inputs":[],"allows_loop":false,"tool_mode":true},{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"load_message","value":"__UNDEFINED__","cache":true,"required_inputs":[],"allows_loop":false,"tool_mode":true}],"field_order":["path","file_path","separator","silent_errors","delete_server_file_after_processing","ignore_unsupported_extensions","ignore_unspecified_files","use_multithreading","concurrency_multithreading"],"beta":false,"legacy":false,"edited":false,"metadata":{},"tool_mode":false,"lf_version":"1.4.2","official":false},"showNode":true,"type":"File","id":"File-sbD9B"},"id":"File-sbD9B","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"description":"Load a file to be used in your project.","name":"File","id":"File-sbD9B","is_component":true,"last_tested_version":"1.4.2"}